# -*- coding: utf-8 -*-
"""Hacker Rank - Nested List

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v4833p7vBHMDLC0Tx4QCdUUIAP5WaKFd

Given the names and grades for each student in a class of N students, store them in a nested list and print the name(s) of any student(s) having the second lowest grade.

Note: If there are multiple students with the second lowest grade, order their names alphabetically and print each name on a new line.

Output:

Print the name(s) of any student(s) having the second lowest grade in. If there are multiple students, order their names alphabetically and print each one on a new line.

#Import Library
"""

from collections import defaultdict

"""#Explanation


There are useful function to make working data easier use collections:
- OrderedDict: Remember the orders in which items were added
- defaultdict :  create a special dictionary where the default value for any key desnt exist automatically initalized as empty list, making convenient for grouping or accumulating data.
- nametuple:Create tuples-like objects where you can access elements by name
- deque : a double-ended queue for fast appends and pop from both ends
- ChainMap : Group multiple dictionaries into a signel, updatable view
- Counter : a dictionary subclass for counting the frequency of items (like words in a text)
- OrderedDict: Remember the orders in which items were added

# Implementation
"""

d = defaultdict(list)

python_students = [["Harry", 37.21], ["Berry", 37.21], ["Tina", 37.2], ["Akriti", 41], ["Harsh", 39]]

for student, grade in python_students:
  d[grade] += [student]

#Sorted Grades
grades = sorted(d.keys())

print(grades)

#find the second lowest
second_lowest_grade = grades[1]

names = sorted(d[second_lowest_grade])

for name in names:
  print(name)

"""#Another Implementation"""

grade_dict = {}
grades = ['A', 'B', 'A', 'C', 'B']
students = ['Alice', 'Bob', 'Charlie', 'David', 'Eve']

for grade, student in zip(grades, students):
  if grade in grade_dict:
    grade_dict[grade].append(student)
  else:
    grade_dict[grade] = [student]

print(grade_dict)